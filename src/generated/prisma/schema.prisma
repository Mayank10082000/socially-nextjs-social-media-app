// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Below are Fields
  id        String   @id @default(cuid()) // cuid --> used for collision resistant unique identifier and is better than uuid
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String? //Question mark means field is optional
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Below are Relations
  posts     Post[] // one to many relation
  comments  Comment[] // one to many relation
  likes     Like[] // one to many relation
  followers Follows[] @relation("followers") // followers of user
  following Follows[] @relation("following") // following of user

  // Below are Notifications
  notifications        Notification[] @relation("userNotifications") // notifications received by user
  notificationsCreated Notification[] @relation("notificationsCreator") //notifications created by user
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations or references
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade) //cascade means if user is deleted, all posts are deleted
  comments      Comment[] // one to many relation
  likes         Like[] // one to many relation
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations or references
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notification Notification[]

  @@index([authorId, postId]) // composite index for faster performance
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations or references
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // this prevents same user from liking same post twice
  @@index([userId, postId]) // composite index for faster performance
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations or references
  follower  User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) // prevents duplicate follows
  @@index([followerId, followingId]) // composite index for faster performance
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  postId    String?
  type      NotificationType
  creatorId String
  read      Boolean
  commentId String?
  createdAt DateTime         @default(now())

  // Relations or references
  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationsCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
